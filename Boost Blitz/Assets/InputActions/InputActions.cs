//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerControls"",
            ""id"": ""69768abd-5449-4ee1-bb70-deaa4b9da484"",
            ""actions"": [
                {
                    ""name"": ""Player1ToggleCamera"",
                    ""type"": ""Button"",
                    ""id"": ""bddd3779-c2fd-4598-9ec2-7a1c4c0e2f7a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Player2ToggleCamera"",
                    ""type"": ""Button"",
                    ""id"": ""3c929f74-d32e-4529-91a6-34ac50562889"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""582cb2e6-1227-47ac-86e1-26386b2ed2db"",
                    ""path"": ""<Keyboard>/#(C)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player1ToggleCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""71bcb485-e011-420c-9e95-406c159f0843"",
                    ""path"": ""<Keyboard>/#(K)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2ToggleCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerControls
        m_PlayerControls = asset.FindActionMap("PlayerControls", throwIfNotFound: true);
        m_PlayerControls_Player1ToggleCamera = m_PlayerControls.FindAction("Player1ToggleCamera", throwIfNotFound: true);
        m_PlayerControls_Player2ToggleCamera = m_PlayerControls.FindAction("Player2ToggleCamera", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerControls
    private readonly InputActionMap m_PlayerControls;
    private List<IPlayerControlsActions> m_PlayerControlsActionsCallbackInterfaces = new List<IPlayerControlsActions>();
    private readonly InputAction m_PlayerControls_Player1ToggleCamera;
    private readonly InputAction m_PlayerControls_Player2ToggleCamera;
    public struct PlayerControlsActions
    {
        private @InputActions m_Wrapper;
        public PlayerControlsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Player1ToggleCamera => m_Wrapper.m_PlayerControls_Player1ToggleCamera;
        public InputAction @Player2ToggleCamera => m_Wrapper.m_PlayerControls_Player2ToggleCamera;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerControlsActionsCallbackInterfaces.Add(instance);
            @Player1ToggleCamera.started += instance.OnPlayer1ToggleCamera;
            @Player1ToggleCamera.performed += instance.OnPlayer1ToggleCamera;
            @Player1ToggleCamera.canceled += instance.OnPlayer1ToggleCamera;
            @Player2ToggleCamera.started += instance.OnPlayer2ToggleCamera;
            @Player2ToggleCamera.performed += instance.OnPlayer2ToggleCamera;
            @Player2ToggleCamera.canceled += instance.OnPlayer2ToggleCamera;
        }

        private void UnregisterCallbacks(IPlayerControlsActions instance)
        {
            @Player1ToggleCamera.started -= instance.OnPlayer1ToggleCamera;
            @Player1ToggleCamera.performed -= instance.OnPlayer1ToggleCamera;
            @Player1ToggleCamera.canceled -= instance.OnPlayer1ToggleCamera;
            @Player2ToggleCamera.started -= instance.OnPlayer2ToggleCamera;
            @Player2ToggleCamera.performed -= instance.OnPlayer2ToggleCamera;
            @Player2ToggleCamera.canceled -= instance.OnPlayer2ToggleCamera;
        }

        public void RemoveCallbacks(IPlayerControlsActions instance)
        {
            if (m_Wrapper.m_PlayerControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerControlsActions @PlayerControls => new PlayerControlsActions(this);
    public interface IPlayerControlsActions
    {
        void OnPlayer1ToggleCamera(InputAction.CallbackContext context);
        void OnPlayer2ToggleCamera(InputAction.CallbackContext context);
    }
}
